
comment = // free_text newline

program = {class_def | statements}

class_def = "class" ident "{" members "}"

members = empty | {member}
member = eventDec | method_decl | varDecl

method_decl = "func" ident "(" method_def_params ")" method_body
mehtod_body = "{" statements ["return" assignable] "}"
varDecl = "var" ident
eventDec = event ident

method_def_params = empty | ident {"," ident}
params = [assignable {"," assignable} ]

block = "{" statements "}"

statements = {if_statement  | assign_statement | method_call
                            | block | handle_statement | every_statement
                            | for_statement }



if_statement = "if" condition block ["else" block]
for_statement = "for" ident "in" assignable block
assign_statement = ident assign_operator assignable
#handle_statement = "handle" object_member "with" (object_member | lambda_def)
#every_statement = "every" period block

#lambda_def = "(" method_def_params ")" "->" block


assignable = method_call | object_member | expression | variable | literal

method_call = [object_member "."] ident "(" params ")"
object_member = {(method_call | ident) "."}  ident


expression = multiplicative_expression { additive_operator multiplicative_expression }
multiplicative_expression = primary_expr {multiplicative_operator primary_expression }
primary_expression = (literal | variable | parentheses_expr )
parentheses_expr = "(" expression ")"

condition = and_condition {or_operator and_condition}
and_condition = equality_condition {and_operator equality_condition}
equality_condition = relational_condition [equal_operator relational_condition]
relational_condition = primary_condition [relation_operator primary_condition]
primary_cond = [unary_operator] (parentheses_condition | assignable )
parentheses_condition = "(" condition ")"

#period = {period} natural_number time_specifier
#time_specifier = "m" | "w" | "d" | "h" | "min" | "sec" | "ms"

unary_operator = "!"
assign_operator = "="
or_operator = "or"
and_operator = "and"
equal_operator = "==" | "!="
relation_operator = "<" | "<=" | "=>" | ">"
additive_operator = "+" | "-"
multiplicative_operator = "*" | "/"

literal = number_literal | text_literal | bool_literal
variable = ident | object_member
 
number_literal = ["-"] (natural_number | double_number)
natural_number = "1".."9" {digit}
double_number = natural_number "." {digit} "1".."9"
bool_const = "true" | "false" | "on" | "off"

ident =  letter {digit | letter}
letter = "a".."z" | "A".."Z" | "_"
digit = "0".."9"

